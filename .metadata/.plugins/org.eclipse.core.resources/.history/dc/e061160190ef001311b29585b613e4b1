#ifndef FACTOR_GRAPH_H
#define FACTOR_GRAPH_H

#include "graph_struct.h"

typedef float (*factor_func)(const vector<int> &labels, void *observed_data);

class factor_graph: public graph_topology
{
private:


	struct iter_param
	{
		int start;
		int step;
		int end;
		iter_param():start(0), step(0), end(0) {}
	};

	int marginalize(const vector<iter_param> &iter_params
			                   , int level, factor_func func, const vector<message> &receivd_msgs
			                   , vector<int> curr_config
			                   , void *observed_data
			                   , float &sum);
public:
	factor_graph(int var_cnt, int factor_cnt);
	int do_loopy_min_sum();
	int compute_message(int v, int w, bool is_sync);
    int draw_graph();
};

#endif
